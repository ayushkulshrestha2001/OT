function[A,newbv]=general_simplex(A,bv,Cost,variables)

ZjCj=Cost(bv)*A-Cost

Zcj=[ZjCj ; A]
simpTable=array2table(Zcj);
simpTable.Properties.VariableNames(1:size(Zcj,2))=variables

%loop starts
RUN=true;
while RUN
    Zc=ZjCj(1:size(A,2)-1);
    if any(Zc<0)
       disp('Current BFS is not optimal ');
       disp('******* The next iteration results ******* ');
       disp(' Basic Variables are ');
       disp(variables(bv))
    
       %find entering variable
    
       [minvalZjCj,minindZjCj]=min(Zc)
       fprintf('Entering variable is')
       disp(variables(minindZjCj))
    
       %find leaving variable
    
       sol=A(:,end)
       pivot_column=A(:,minindZjCj)
       if all(pivot_column<=0)
          print('LPP is Unbounded');
       else
          for i=1:size(pivot_column,1)
             if pivot_column(i)>0
                ratio(i)=sol(i)./pivot_column(i)
             else
                ratio(i)=inf
             end    
          end
       end    
       [minratio,ratio_index]=min(ratio)      %value and index of minimum ratio
       fprintf('Leaving variable is')
       disp(variables(bv(ratio_index)))
    
       bv(ratio_index)=minindZjCj             %changing basic variables
       pivot_value=A(ratio_index,minindZjCj)  %pivot_key
    
       %Update the table
       A(ratio_index,:)=A(ratio_index,:)./pivot_value
       for j=1:size(A,1)
          if j~=ratio_index
             A(j,:) = A(j,:) - ( A(j,minindZjCj).*A(ratio_index,:) )
          end  
       end    
       ZjCj=ZjCj - (ZjCj(minindZjCj).*A(ratio_index,:) ) %updating ZjCj row
    
       Zcj=[ZjCj ; A]
       simpTable=array2table(Zcj);
       simpTable.Properties.VariableNames(1:size(Zcj,2))=variables
       
    else
      RUN=false;
      disp('Optimal Solution obtained');
      newbv=bv;
    end
end